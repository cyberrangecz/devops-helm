apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.global.services.answersStorage.name }}-configmap
  labels: {{- include "common.labels" (dict "name" .Values.global.services.answersStorage.name "chart" .Chart "release" .Release "extraLabels" .Values.extraLabels) | nindent 4 }}
data:
  kypo-answers-storage.properties: |
    ## server port for a given service, e.g., 8086
    server.port={{ .Values.global.services.answersStorage.port }}
    ## server context path (the base url for the service), e.g., /kypo-answer-storage/api/v1
    server.servlet.context-path={{ .Values.global.services.answersStorage.contextPath }}
    ## microservice name which is used in user management service for identification of this service, e.g. kypo-smart-assistant
    microservice.name=kypo-answers-storage

    ## Allows you to specify allowed origins for CORS mapping. You could set it as, e.g., http://domain1.com, http://domain2.com, etc. The default value is: *
    {{- if .Values.global.corsWhitelist }}
    cors.allowed.origins=https://{{ .Values.global.headHost }},{{- range $index, $origin := .Values.global.corsWhitelist -}}{{ if $index }},{{ end }}{{ $origin }}{{- end }}
    {{- else }}
    cors.allowed.origins=https://{{ .Values.global.headHost }}
    {{- end }}

    # DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
    spring.datasource.url=jdbc:postgresql://{{ .Values.global.postgres.serviceName }}:{{ .Values.global.postgres.port }}/{{ .Values.global.postgresServices.answersStorage.dbName }}
    spring.datasource.username={{ .Values.global.postgresServices.answersStorage.dbUser }}
    spring.datasource.password={{ .Values.global.postgresServices.answersStorage.dbPassword }}
    spring.datasource.driver-class-name=org.postgresql.Driver

    # JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
    spring.jpa.hibernate.ddl-auto=
    spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

    ## Configuring Jackson serializer for converting Java 8 dates to ISO format
    spring.jackson.serialization.write_dates_as_timestamps=false
    ## all atributes in JSON are in SNAKE_CASE
    spring.jackson.property-naming-strategy=SNAKE_CASE
    spring.flyway.enabled=true
