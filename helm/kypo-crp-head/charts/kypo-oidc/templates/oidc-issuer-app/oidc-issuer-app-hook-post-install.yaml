{{- with .Values.oidcIssuerApp }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ .name }}-hook-postinstall
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
    - name: {{ .name }}-post-install-job
      image: postgres:13-alpine
      imagePullPolicy: IfNotPresent
      command:
        - "/bin/bash"
        - "-c"
        - |
          apk add curl jq
          client_id=`PGPASSWORD={{ $.Values.global.postgres.password }} psql -h {{ $.Values.global.postgres.serviceName }} -p {{ $.Values.global.postgres.port }} -U {{ $.Values.global.postgres.user }} {{ $.Values.postgresServices.oidcIssuer.dbName }} -c "select client_id from client_details where client_name='KYPO-Client';" -t`
          if [ -z "$client_id" ]
          then
            super_client_id=`PGPASSWORD={{ $.Values.global.postgres.password }} psql -h {{ $.Values.global.postgres.serviceName }} -p {{ $.Values.global.postgres.port }} -U {{ $.Values.global.postgres.user }} {{ $.Values.postgresServices.oidcIssuer.dbName }} -c "select client_id from client_details where client_name='Dummy Issuer OIDC SuperAdmin';" -t | xargs`
            while [ -z "$super_client_id" ]
            do
              super_client_id=`PGPASSWORD={{ $.Values.global.postgres.password }} psql -h {{ $.Values.global.postgres.serviceName }} -p {{ $.Values.global.postgres.port }} -U {{ $.Values.global.postgres.user }} {{ $.Values.postgresServices.oidcIssuer.dbName }} -c "select client_id from client_details where client_name='Dummy Issuer OIDC SuperAdmin';" -t | xargs`
            done
            super_client_secret=`PGPASSWORD={{ $.Values.global.postgres.password }} psql -h {{ $.Values.global.postgres.serviceName }} -p {{ $.Values.global.postgres.port }} -U {{ $.Values.global.postgres.user }} {{ $.Values.postgresServices.oidcIssuer.dbName }} -c "select client_secret from client_details where client_name='Dummy Issuer OIDC SuperAdmin';" -t | xargs`
            basic_auth=`echo -n "$super_client_id":"$super_client_secret" | base64 -w 0`
            bearer_token=`curl -s --request POST --url http://oidc-issuer-app:8080/csirtmu-dummy-issuer-server/token --header 'Accept: application/json' --header 'Authorization: Basic '"$basic_auth" --header 'Cache-Control: no-cache' --header 'Content-Type: application/x-www-form-urlencoded' --data 'grant_type=client_credentials&scope=openid' | jq -r '.access_token'`
            curl -s --request POST http://oidc-issuer-app:8080/csirtmu-dummy-issuer-server/api/clients --header 'Accept: application/json' --header 'Authorization: Bearer '"$bearer_token" --header 'Cache-Control: no-cache' --header 'Content-Type: application/json' --data '{"clientId":"{{- range $.Values.global.oidcProviders }}{{- if contains "csirtmu-dummy-issuer-server" .url }}{{ .clientId }}{{- end }}{{- end }}","clientSecret":null,"redirectUris":["https://{{ $.Values.global.headHost }}","https://{{ $.Values.global.headHost }}/index.html","https://{{ $.Values.global.headHost }}/silent-refresh.html","https://{{ $.Values.global.headHost }}/grafana/login/generic_oauth"],"clientName":"KYPO-Client","clientUri":null,"logoUri":null,"contacts":[],"tosUri":null,"tokenEndpointAuthMethod":"SECRET_BASIC","scope":["openid","email","profile","offline_access"],"grantTypes":["implicit","authorization_code"],"responseTypes":["id_token","token"],"policyUri":null,"jwksUri":null,"applicationType":null,"sectorIdentifierUri":null,"subjectType":null,"requestObjectSigningAlg":null,"userInfoSignedResponseAlg":null,"userInfoEncryptedResponseAlg":null,"userInfoEncryptedResponseEnc":null,"idTokenSignedResponseAlg":null,"idTokenEncryptedResponseAlg":null,"idTokenEncryptedResponseEnc":null,"tokenEndpointAuthSigningAlg":null,"defaultMaxAge":null,"requireAuthTime":null,"defaultACRvalues":[],"initiateLoginUri":null,"postLogoutRedirectUri":"https://{{ $.Values.global.headHost }}/logout-confirmed","requestUris":[],"authorities":[],"accessTokenValiditySeconds":10800,"refreshTokenValiditySeconds":null,"resourceIds":[],"clientDescription":"","reuseRefreshToken":true,"dynamicallyRegistered":false,"allowIntrospection":false,"idTokenValiditySeconds":600}'
          fi
  restartPolicy: Never
  terminationGracePeriodSeconds: 0
{{- end }}
